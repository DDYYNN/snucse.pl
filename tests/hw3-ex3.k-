let q := () in
let val := 10 in
push<q, val>;
write q.task;
write if q.next = () then 1 else 0;
let e := pop<q> in
write e;
write if q = () then 1 else 0;

(*

10
1
10
1

*)

let q := () in
let a := 100 in
let b := 200 in
let c := 300 in

push<q, a>;
push<q, b>;
push<q, c>;
write pop<q>;
write pop<q>;
write pop<q>;

(*

100
200
300

*)

write if isEmpty(()) then 1 else 0;
write if isEmpty(leaf(100)) then 1 else 0;
let one_two_three := makeTree(100, leaf(200), leaf(300)) in
write (lTree(one_two_three)).value;
write (rTree(one_two_three)).value;
write nodeVal(leaf(1000));

let l1 := leaf(1) in
let l2 := leaf(2) in
let t1 := makeTree(3, l1, l2) in
let t2 := makeLtree(11, t1) in
let t3 := makeRtree(19, leaf(39)) in
let t4 := makeTree(27, t3, t2) in
dft(t4);
bft(t4);

(*

1
0
200
300
1000
27
19
39
11
3
1
2
27
19
11
39
3
1
2

*)

dft( makeTree( 1, makeTree (2, leaf(4), makeLtree(5, leaf(6))), makeTree( 3,
  makeRtree( 7, makeRtree( 9, leaf(10))), leaf(8))));

dft(makeRtree(3, makeRtree(1, makeRtree(2, makeTree(6, leaf(4), leaf(5))))));

bft( makeTree( 1, makeTree (2, leaf(4), makeLtree(5, leaf(6))), makeTree( 3,
  makeRtree( 7, makeRtree( 9, leaf(10))), leaf(8))));

bft(makeRtree(3, makeRtree(1, makeRtree(2, makeTree(6, leaf(4), leaf(5))))));

(*

1
2
4
5
6
3
7
9
10
8
3
1
2
6
4
5
1
2
3
4
5
7
8
6
9
10
3
1
2
6
4
5

*)

let lf := leaf (2) in
write (nodeVal (lf));
let tr := makeLtree(1, (leaf (2))) in
if isEmpty(rTree(tr)) then write (1) else write (0);
let t1 := makeTree(1, leaf(2), leaf(3)) in
let t0 := makeTree(0, t1, leaf(4)) in
dft (t0);
bft (t0);

(*

2
1
0
1
2
3
4
0
1
4
2
3

*)

()
