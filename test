#!/usr/bin/env ruby
Dir.chdir File.dirname __FILE__

require 'curses'
require 'parallel'

GREEN = 1
RED = 2
$results = []

Curses::noecho
Curses::init_screen
Curses::start_color
Curses::init_pair(GREEN, 83, Curses::COLOR_BLACK)
Curses::init_pair(RED, 166, Curses::COLOR_BLACK)



#
# Helpers
#
def assert(actual, msg = 'Assertion failed')
  return true if actual

  $results << msg
  false
end

def assert_eq msg, actual, expected
  return true if expected == actual

  $results << '%s, Expected : "%s", Actual : "%s"' % [msg, expected.chomp, actual.chomp]
  false
end

class Fixnum
  def digits
    return 1 if self == 0
    Math.log10(abs).to_i + 1
  end
end

class Curses::Window
  def print(msg)
    self << msg
    refresh
  end

  def color(col)
    color_set col
    yield
    color_set 0
  end

  def counter(count)
    Counter.new(self, count)
  end

  def ok(bool)
    col, msg = bool ? [GREEN, "✓\n"] : [RED, "✗\n"]
    color(col) { print msg * maxy }
  end

  def results(array)
    self.result array.count(true), array.count
  end

  def result(succeeded, total)
    succeeded = succeeded.to_i
    total = total.to_i

    icon, col = succeeded == total && total != 0 ? ['✓', GREEN] : ['✗', RED]
    color(col) { self << icon }

    print ' (%d/%d, %g%%)' % [succeeded, total, succeeded * 100.0 / total]
  end
end

class Counter
  def initialize win, total
    @win = win
    @format = "%0#{(total - 1).digits}d/#{total}"
    @iter = 0
    @total = total
    @print_length = 0
  end

  def tick
    msg = @format % @iter
    @win.print "\b"*@print_length + msg

    @iter += 1
    @print_length = msg.length
  end

  def clean
    @win.print "\b"*@print_length + ' '*@print_length + "\b"*@print_length

    @iter = @total
    @print_length = 0
  end

  def count; return @iter end
end


#
# Tests
#
class Test
  @@tasks = []
  @@pos = 3

  head = Curses::Window.new(2, 0, 1, 3)
  head.print <<-HEAD
  Homework │ Status
───────────┼─────────
  HEAD

  def self.add(*params)
    height = params.length

    left = Curses::Window.new(height, 6, @@pos, 10)
    left << params.map { |x| x + ' |' } .join("\n")
    left.refresh

    win = Curses::Window.new(height, 0, @@pos, 16)
    @@tasks << Thread.new do
      yield win
    end
    @@pos += height
  end

  def self.wait
    @@tasks.each { |thr| thr.join }

    line = Curses::Window.new(0, 2, 0, 43)
    line << "|\n" * line.maxy
    line.refresh

    win = Curses::Window.new(0, 0, 1, 45)
    win.keypad true
    win.scrollok true

    if $results.empty?
      win << '    All Green!'
    else
      win << $results.join("\n")
    end

    win.print "\n\n    Press 'q' to exit "

    loop do
      break if win.getch == 'q'
    end
  end
end

def kminus win, dirname, ext = 'k-'
  `cd #{dirname} && make 2>/dev/null`
  tests = Dir["#{dirname}/examples/*.out"]
  counter = win.counter tests.count
  results = tests.map do |name|
    code = File.basename(name, '.out')

    input = File.join(dirname, 'examples', File.basename(name, '.out') + '.in')
    actual = unless File.exist?(input)
      `#{dirname}/run #{dirname}/examples/#{code}.#{ext} 2>/dev/null`
    else
      `#{dirname}/run #{dirname}/examples/#{code}.#{ext} < #{input} 2>/dev/null`
    end

    expected = File.read(name)

    counter.tick
    res = assert_eq name, actual, expected
  end
  counter.clean

  win.results results
end


Test.add '1.*', '2.*' do |win|
  win.ok assert system 'ocaml tests/basic.ml'
end

Test.add '2.2' do |win|
  win.ok assert system 'ocaml tests/hw2-ex2.ml'
end

Test.add '2.7' do |win|
  expected = File.read('tests/hw2-ex7')
  actual = `ocaml tests/hw2-ex7.ml`

  win.ok assert_eq '2.7', actual, expected
end

Test.add '3.1' do |win|
  kminus win, 'hw3'

  # TODO: Dependency
  Test.add '3.2', &method(:_3_2)
  Test.add '3.3', &method(:_3_3)
end

def _3_2(win)
  @exename = "tests/hw3-ex2/main"

  win.print 'Compiling...'
  `cd tests/hw3-ex2 && make`
  win.clear

  try = 120
  @counter = win.counter try
  def test num
    @counter.tick
    assert_eq "3.2 with #{num}", `echo #{num} | hw3/run hw3/examples/ex2.k-`, `#{@exename} #{num}`
  end

  win.print 'Testing '
  result = test 10000
  results = Parallel.map(2..try, in_threads: 3) { test rand(1..10000) }
  win.clear

  win.ok result && results.all?
end

def _3_3(win)
  results = ['hw3-ex3', 'hw3-ex3-TA'].map do |name|
    code = File.read('hw3/examples/ex3.k-')
    test = File.read("tests/#{name}.k-")

    tmp = 'tests/tmp'
    File.write(tmp, code + ';' + test)
    actual = `hw3/run #{tmp}`
    File.delete tmp

    expected = File.read("tests/#{name}.out")

    assert_eq name, actual, expected
  end

  win.ok results.all?
end

Test.add '4.2' do |win|
  succeeded, total = `cd hw4 && ./test --simple`.chomp.split('/')
  assert(succeeded == total, 'Homework 4.2 not completed!')

  win.result succeeded, total
end

Test.add '5.1' do |win|
  kminus win, 'hw5', 'k--'
end

Test.add '5.2' do |win|
  `cd hw5 && make gctest`

  expected = File.read('hw5/gctest.out')
  actual = `hw5/gctest`

  win.ok assert_eq '5.2', actual, expected
end

Test.add '6.1' do |win|
  kminus win, 'hw6-1', 'sm5'
end

# TODO: 줄안맞음
Test.add '7  ' do |win|
  `cd hw7 && make 2>/dev/null`
  results = Dir['hw7/examples/*.xexp'].map do |name|
    lines = `hw7/run #{name} 2>/dev/null`.split("\n")
    result = lines.include? "[Valid] Exception sugar removed successfully"

    if lines[1].match /^Unhandled Exception #/
      lines[1] = '201511'
    end

    (assert result, 'Exception sugar is not removed') && (assert_eq name, lines[4], lines[1])
  end

  win.results results
end

Test.add '8  ' do |win|
  `cd hw8 && make 2>/dev/null`
  results = Dir['hw8/examples/*.m'].map do |name|
    no = File.basename(name, '.m') + ' of hw8'

    expected = File.read(name + '.out').chomp
    actual = `hw8/run #{name} 2>/dev/null`.chomp
    if /^Type Checking Failed:/ === actual then actual = 'Type Checking Failed' end

    assert_eq no, actual, expected
  end

  win.results results
end

Test.wait
