#!/usr/bin/env ruby
require 'diffy'
require 'curses'

#
# Helpers
#
def assert actual; assert_eq actual, true end
def assert_eq actual, expected
  if actual == expected; return end

  # TODO: no stdout
  Diffy::Diff.default_format = :color
  puts
  puts 'Failed'
  puts " \e[32mEXPECTED\e[0m  \e[31mACTUAL\e[0m"
  puts '-'*40
  puts
  puts Diffy::Diff.new actual, expected
  exit 1
end

class Fixnum
  def digits
    return 1 if self == 0
    Math.log10(self.abs).to_i + 1
  end
end

class Curses::Window
  def print(msg)
    self << msg
    self.refresh
  end

  def temp(msg)
    self.print msg

    clean = "\b"*msg.length + ' '*msg.length + "\b"*msg.length
    TempMsg.new(self, clean)
  end

  def counter(count)
    Counter.new(self, count)
  end
end

class Counter
  def initialize win, total
    @win = win
    @format = "%0#{(total - 1).digits}d/#{total}"
    @iter = 0
    @total = total
    @print_length = 0
  end

  def tick
    msg = @format % @iter
    @win.print "\b"*@print_length + msg

    @iter += 1
    @print_length = msg.length
  end

  def clean
    @win.print "\b"*@print_length + ' '*@print_length + "\b"*@print_length

    @iter = @total
    @print_length = 0
  end

  def count; return @iter end
end

class TempMsg
  def initialize(win, clean)
    @win = win
    @clean = clean
  end

  def clean
    @win.print @clean
  end
end


#
# Tests
#
class Test
  @@tasks = []
  @@pos = 2

  def self.add(height = 1)
    win = Curses::Window.new(height, 0, @@pos, 0)
    @@tasks << Thread.new do
      yield win
    end
    @@pos += height
  end

  def self.wait
    @@tasks.each { |thr| thr.join }

    win = Curses::Window.new(1, 0, 0, 0)
    win.print 'Done!'
    win.getch
  end
end

def kminus win, dirname, ext = 'k-'
  `cd #{dirname} && make 2>/dev/null`
  glob = Dir.glob("#{dirname}/examples/*.out")
  counter = win.counter glob.count
  glob.each do |name|
    code = File.basename(name, '.out')

    input = File.join(dirname, 'examples', File.basename(name, '.out') + '.in')
    actual = unless File.exist?(input)
      `#{dirname}/run #{dirname}/examples/#{code}.#{ext}`
    else
      `#{dirname}/run #{dirname}/examples/#{code}.#{ext} < #{input}`
    end

    expected = File.read(name)

    assert_eq actual, expected
    counter.tick
  end
  counter.clean
  win.print 'OK (%d)' % counter.count
end


Test.add(2) do |win|
  win.print "Homework 1.*\nHomework 2.* ... "

  assert system 'ocaml tests/basic.ml'

  win.print 'OK'
end

Test.add do |win|
  win.print 'Homework 2.2 ... '

  assert system 'ocaml tests/hw2-ex2.ml'

  win.print 'OK'
end

Test.add do |win|
  win.print 'Homework 2.7 ... '

  assert_eq `ocaml tests/hw2-ex7.ml`, File.read('tests/hw2-ex7')

  win.print 'OK'
end

Test.add do |win|
  win.print 'Homework 3.1 ... '

  kminus win, 'hw3'
end

Test.add do |win|
  win.print 'Homework 3.2 ... '

  tmp = win.temp 'Compiling reference program'
  @exename = "tests/coin"
  system "g++ -std=c++0x -O3 tests/hw3-ex2.cc -o #{@exename}"
  tmp.clean

  tmp = win.temp 'Testing '
  try = 120
  counter = win.counter try
  def test num
    assert_eq `echo #{num} | hw3/run hw3/examples/ex2.k-`, `#{@exename} #{num}`
  end

  try -= 1
  counter.tick
  test 10000
  try.times do
    counter.tick
    test rand(1..10000)
  end

  tmp.clean
  counter.clean
  File.delete @exename

  win.print 'OK'
end

Test.add do |win|
  def test name
    code = File.read('hw3/examples/ex3.k-')
    test = File.read("tests/#{name}.k-")

    tmp = 'tests/tmp'
    File.write(tmp, code + ';' + test)
    actual = `hw3/run #{tmp}`
    File.delete tmp

    expected = File.read("tests/#{name}.out")

    assert_eq actual, expected
  end

  win.print 'Homework 3.3 ... '

  test 'hw3-ex3'
  test 'hw3-ex3-TA'

  win.print 'OK'
end

Test.add do |win|
  win.print 'Homework 4.2 ... '

  msg = `cd hw4 && ./test --simple`
  assert $?.success?

  win.print msg
end

#Test.add do |win|
#  win.print 'Homework 5.1 ... '
#
#  kminus win, 'hw5', 'k--'
#end

Test.wait
