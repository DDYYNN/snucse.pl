#!/usr/bin/env ocaml
#use "main.ml"

(*
 * Use Cases
 * --------
 *
 * 1. Expect specific result
 *
 *    expect_str
 *    (Branch (
 *      Guide ("x", End (NameBox "x")),
 *      Branch (Guide ("y", End (NameBox "y")), End StarBox)
 *    ))
 *    "{-}";;
 *
 * 2. Expect failure
 *
 *    expect_fail
 *    (Branch (
 *      Guide ("x", Branch (End (NameBox "x"), End (NameBox "x"))),
 *      End StarBox
 *    ))
 *
 *)
let keylist_to_string (keylist: key list): string =
  let rec key_to_string key =
    match key with
    | Bar -> "-"
    | Node (left, right) -> "(" ^ key_to_string left ^ "," ^ key_to_string right ^")"
  in
  let stringlist = List.map key_to_string keylist in
  "{" ^ String.concat ", " stringlist ^ "}"

let fmt = Printf.sprintf
let tr_to_str (tr: treasure): string =
  match tr with
  | StarBox -> "StarBox"
  | NameBox name -> fmt "NameBox \"%s\"" name

let rec map_to_str (map: map): string =
  match map with
  | End tr -> fmt "End (%s)" (tr_to_str tr)
  | Branch(mleft, mright) -> fmt "Branch (%s, %s)" (map_to_str mleft) (map_to_str mright)
  | Guide(name, mdef) -> fmt "Guide (%s, %s)" name (map_to_str mdef)

let rec abbr_str (input: string): string =
  let limit = 100 in
  let len = String.length input in
  if len <= limit then
    input
  else
    String.sub input 0 (limit - 3) ^ "..."

let rec wrap_string (input: string): string =
  let limit = 100 in
  let len = String.length input in
  if len <= limit then
    input
  else
    String.sub input 0 limit ^ "\n                     " ^ wrap_string (String.sub input limit (len - limit))

let test_results = ref []

let expect_str: map -> string -> unit =
  let test_count = ref 1 in
  fun map expected -> begin
    let problem = map_to_str map in
    let actual = begin
      try keylist_to_string (getReady map) with | IMPOSSIBLE -> "IMPOSSIBLE"
    end in
    test_results := !test_results @ [(!test_count, problem, expected, actual)];
    test_count := !test_count + 1
  end

let expect (map: map) (expected: key list) =
  let expected = List.sort_uniq compare expected in
  expect_str map (keylist_to_string expected)

let expect_fail (map: map) = expect_str map "IMPOSSIBLE"

let print_results ((): unit) =
  let good = "\x1b[38;5;083m" in
  let bad  = "\x1b[38;5;166m" in
  let gray = "\x1b[38;5;237m" in
  let tint = "\x1b[38;5;192m" in
  let rst  = "\x1b[0m" in
  let per_ok (no, _, expected, actual) =
    if expected = actual then
      Printf.printf "  %2d   %s✓%s   %s\n" no good rst (abbr_str expected)
  in
  let per_error (no, problem, expected, actual) =
    if not (expected = actual) then begin
      Printf.printf "\n";
      Printf.printf "  %2d   %s⚠%s" no bad gray;
      Printf.printf         "    Problem: %s%s%s\n" rst  (wrap_string problem) gray;
      Printf.printf "\n";
      Printf.printf "           Expected: %s%s%s\n" tint (wrap_string expected) gray;
      Printf.printf "              Given: %s%s\n"   rst  (wrap_string actual);
      Printf.printf "\n";
    end
  in
  let count_good = List.fold_left (fun n (_, _, exp, act) -> n + (if exp = act then 1 else 0)) 0 !test_results in
  let count_all = List.length !test_results in
  let percentage = 100.0 *. float_of_int count_good /. float_of_int count_all in
  Printf.printf "Test result: %d/%d (%g%%)\n\n" count_good count_all percentage;
  List.iter per_ok !test_results;
  List.iter per_error !test_results;
  Printf.printf "\nTest result: %d/%d (%g%%)\n\n" count_good count_all percentage;
;;


(*
 * Test cases by @kalaluthien
 *)
let m1 = Guide("a",End(NameBox"a"))
let ans1 = [Bar]

let m2 = Branch(Guide("x",End(NameBox"x")),End(StarBox))
let ans2 = [Bar]

let m3 = Guide("a",Guide("b",Branch(End(NameBox"b"),End(NameBox"a"))))
let ans3 = [Bar; Node (Bar, Bar)]

let m4 = Branch(Guide("y",End(NameBox"y")),Guide("x",End(NameBox"x")))
let ans4 = [Bar; Node (Bar, Bar)]

let m5 = Branch(Branch(End(NameBox"a"),End(StarBox)),End(NameBox"b"))
let ans5 = [Bar; Node (Bar, Node (Bar, Bar))]

let m6 = Guide("x",Branch(End(NameBox"y"),Branch(End(NameBox"x"),End(StarBox))))
let ans6 = [Bar; Node (Bar, Bar)]

let m7 = Branch(Guide("y", End(NameBox"y")), Guide("x", Branch(End(NameBox"x"), End StarBox)))
let ans7 = [Bar;Node(Bar,Bar);Node(Node(Bar,Bar),Bar)]

let m8 = Branch (End(NameBox"x"), Branch(End(NameBox"y"),Branch(End(NameBox"z"),End(StarBox))))
let ans8 = [Bar; Node (Bar, Bar)]

let m9 = Guide("x", Guide("y", Branch(End(NameBox"x"),Branch(End(NameBox"y"),End(NameBox"x")))))
let ans9 = [Node (Bar, Bar); Node (Node (Bar, Bar), Bar)]

let m10 = Guide ("x", Guide ("y", Branch(End(NameBox"y"), Branch (End(NameBox "x"), End StarBox))))
let ans10 = [Bar; Node (Bar, Bar)]

let m11 = Guide ("a", Branch (Branch (End (NameBox "a"), End (StarBox)), Guide ("b", End (NameBox "b"))))
let ans11 = [Bar; Node (Bar, Node (Node (Bar, Bar), Bar))]

let m12 = Branch(Branch(End(NameBox"p"),Branch(End(NameBox"q"),End(StarBox))),Guide("r",End(NameBox"r")))
let ans12 = [Bar; Node (Bar, Bar); Node (Bar, Node (Node (Bar, Bar), Bar))]

let m13 = Branch(Branch(Guide("x",End(NameBox"x")),Guide("y",End(NameBox"y"))),Branch(End(NameBox"z"),End(StarBox)))
let ans13 = [Bar; Node (Bar, Bar)]

let m14 = Guide ("x", Guide ("y", Guide ("z", Branch (Branch (End (NameBox "x"), End (NameBox "y")), End (NameBox "z")))))
let ans14 = [Bar; Node (Bar, Node (Bar, Bar))]

let m15 = Branch(Guide("z",End(NameBox"z")),Guide("x",Guide("y",Branch(End(NameBox"x"),Branch(End(NameBox"y"),End(StarBox))))))
let ans15 = [Bar; Node (Bar, Bar); Node (Node (Bar, Bar), Node (Node (Bar, Bar), Bar))]

let m16 = Branch (Branch (Branch (Guide("t",Guide("o",Branch(End(NameBox"o"),End(NameBox"t")))), Guide("h",End(NameBox"h"))), Guide("f",End(NameBox"f"))), End(NameBox"v"))
let ans16 = [Bar; Node (Bar, Bar); Node (Node (Bar, Bar), Node (Bar, Bar))]

let m17 = Branch (Branch (End (NameBox "x"), End (NameBox "y")), Guide ("y", Branch (End (NameBox "y"), End StarBox)))
let ans17 = [Bar; Node (Bar, Bar); Node (Node (Bar, Bar), Node (Node (Node (Bar, Bar), Bar), Bar))]

let m18 = Branch(Guide("a",Guide("b",Branch(End(NameBox"a"),End(NameBox"b")))),Guide("c",Guide("d",Branch(End(NameBox"d"),End(NameBox"c")))))
let ans18 = [Bar; Node (Bar, Bar); Node (Bar, Node (Node (Bar, Bar), Bar))]

let m19 = Branch(Branch(Branch(Guide("x",Guide("y",Guide("z",Branch(Branch (End (NameBox "x"),End (NameBox "y")),End (NameBox "z"))))),End (NameBox "a")),End (NameBox "b")),End (NameBox "c"))
let ans19 = [Bar; Node(Bar,Node(Bar,Bar))]

let m20 = Branch (Branch (Branch (Branch (End(NameBox"a"), End(NameBox"b")), End(NameBox"c")), Branch (Branch(End(NameBox"d"),End(NameBox"e")), End(NameBox"f"))), Branch(End(NameBox"b"),End(StarBox)))
let ans20 = [Bar; Node (Bar, Bar); Node (Bar, Node (Bar, Bar)); Node (Node (Bar, Bar), Node (Bar, Node (Bar, Node (Bar, Bar))))]

let m21 = Branch (Branch (Branch (Branch (End(NameBox"a"), End(NameBox"b")), End(NameBox"c")), Branch (Branch(End(NameBox"d"),End(NameBox"e")), End(NameBox"f"))), Branch(End(NameBox"c"),End(StarBox)))
let ans21 = [Bar; Node (Bar, Bar); Node (Bar, Node (Bar, Bar)); Node (Bar, Node (Node (Bar, Bar), Node (Bar, Node (Bar, Bar))))]

let m22 = Branch (Branch (Branch (Branch (End(NameBox"a"), End(NameBox"b")), End(NameBox"c")), Branch (Branch(End(NameBox"d"),End(NameBox"e")), End(NameBox"f"))), Branch(End(NameBox"d"),End(StarBox)))
let ans22 = [Bar; Node (Bar, Node (Bar,Bar)); Node (Bar, Node (Bar, Node (Bar, Node (Node (Bar,Bar), Bar))))]

let m23 = Branch (Branch (Branch (Branch (End(NameBox"a"), End(NameBox"b")), End(NameBox"c")), Branch (Branch(End(NameBox"d"),End(NameBox"e")), End(NameBox"f"))), Branch(End(NameBox"e"),End(StarBox)))
let ans23 = [Bar; Node(Bar,Bar); Node(Node(Bar,Bar),Node(Bar,Bar)); Node(Bar,Node(Bar,Node(Bar,Node(Bar,Bar))))]

let m24 = Branch (Branch (Branch (Branch (End(NameBox"a"), End(NameBox"b")), End(NameBox"c")), Branch (Branch(End(NameBox"d"),End(NameBox"e")), End(NameBox"f"))), Branch(End(NameBox"f"),End(StarBox)))
let ans24 = [Bar; Node (Bar, Bar); Node (Bar, Node (Node (Bar, Bar), Bar)); Node (Bar, Node (Bar, Node (Bar, Node (Bar, Bar))))]

let m25 = Branch(Guide ("x", (Guide ("y", Guide ("z", Guide ("w", Branch (Branch (End (NameBox "x"), End (NameBox "y")), Branch (End (NameBox "z"), End (NameBox "w")))))))), Guide ("a", Branch (End (NameBox "a"),End (NameBox "b"))))
let ans25 = [Bar; Node(Bar,Bar); Node(Bar,Node(Bar,Bar)); Node(Node(Bar,Node(Bar,Bar)),Node(Bar,Bar))]

let ex1 = Guide("x",Branch(End(StarBox),End(NameBox"x")))

let ex2 = Branch(Guide("x",Branch(End(NameBox"x"),End(NameBox"x"))),End(StarBox))

let ex3 = Branch(Guide ("x", Branch (End (NameBox "x"), End (NameBox "x"))),Guide ("y", Branch (End (NameBox "y"), End (NameBox "y"))))

let ex4 = Branch(Guide ("z", End (NameBox "z")), Branch(Guide ("x", Branch (End (NameBox "x"), End (NameBox "x"))),Guide ("y", Branch (End (NameBox "y"), End (NameBox "y")))))

let ex5 = Branch(Branch(End(NameBox"q"),End(NameBox"p")),Guide("q",Branch(End(NameBox"p"),End(NameBox"q"))))

let ex6 = Branch(Guide("b",Branch(End (NameBox "a"), End(NameBox "b"))), Guide("a", Branch(End (NameBox "b"), End(NameBox "a"))))

let ex7 = Branch(Guide("x",Branch(End(NameBox"y"), End(NameBox"x"))),Guide("y",Branch(Branch(End(NameBox"z"),Branch(End(NameBox"y"),End(NameBox"w"))),End(NameBox"u"))))

let ex8 = Branch (Branch (Branch (Branch (End(NameBox"a"), End(NameBox"b")), End(NameBox"c")), Branch (Branch(End(NameBox"d"),End(NameBox"e")), End(NameBox"f"))), Branch(End(NameBox"a"),End(StarBox)))

let ex9 = Branch(Guide("x",(Guide("y",Guide("z",Guide ("w",Branch(Branch(End(NameBox"x"),End(NameBox"y")),Branch(End(NameBox"z"),End(NameBox"w")))))))),End StarBox)

let ex10 = Guide("x",Guide("z",Guide("y", Branch(Branch(Branch(End(NameBox"x"),End(NameBox"y")),Branch(End(NameBox"z"),End(NameBox"y"))),Branch(Branch(End(NameBox"x"),End(NameBox"y")),Branch(End(NameBox"z"),End(NameBox"y")))))))
;;

expect m1 ans1;;
expect m2 ans2;;
expect m3 ans3;;
expect m4 ans4;;
expect m5 ans5;;
expect m6 ans6;;
expect m7 ans7;;
expect m8 ans8;;
expect m9 ans9;;
expect m10 ans10;;
expect m11 ans11;;
expect m12 ans12;;
expect m13 ans13;;
expect m14 ans14;;
expect m15 ans15;;
expect m16 ans16;;
expect m17 ans17;;
expect m18 ans18;;
expect m19 ans19;;
expect m20 ans20;;
expect m21 ans21;;
expect m22 ans22;;
expect m23 ans23;;
expect m24 ans24;;
expect m25 ans25;;
expect_fail ex1;;
expect_fail ex2;;
expect_fail ex3;;
expect_fail ex4;;
expect_fail ex5;;
expect_fail ex6;;
expect_fail ex7;;
expect_fail ex8;;
expect_fail ex9;;
expect_fail ex10;;


(*
 * Test cases by @wookayin
 *)
expect_str
(End StarBox)
"{-}";;

expect_str
(End (NameBox "x"))
"{-}";;

expect_str
(Guide ("x", End (NameBox "x")))
"{-}";;

expect_str
(Branch (Guide ("x", End (NameBox "x")), End StarBox))
"{-}";;

expect_fail
(Branch (
  Guide ("x", Branch (End (NameBox "x"), End (NameBox "x"))),
  End StarBox
));;

expect_str
(Branch (
  Guide ("x", End (NameBox "x")),
  Branch (Guide ("y", End (NameBox "y")), End StarBox)
))
"{-}";;

expect_str
(Branch (
  Guide ("x", End (NameBox "x")),
  Guide ("y", End (NameBox"y"))
))
"{-, (-,-)}";;

expect_str
(Branch (End (NameBox "x"), End StarBox))
"{-, (-,-)}";;

expect_str
(Guide ("x", Guide ("y",
  Branch (End (NameBox "x"),End (NameBox "y"))
)))
"{-, (-,-)}";;

expect_str
(Guide ("x", Guide ("y", Guide ("z",
  Branch (Branch (End (NameBox "x"), End (NameBox "y")), End (NameBox "z"))
))))
"{-, (-,(-,-))}";;

expect_str
(Guide ("x", Guide ("y", Guide ("z",
  Branch (End (NameBox "x"),Branch (End (NameBox "y"), End (NameBox "z")))
))))
"{-, (-,-)}";;

expect_str
(Branch(
  Guide ("x", Guide ("y", Branch (End (NameBox "y"), End (NameBox "x")))),
  Branch (End (NameBox "z"), End (NameBox "w"))
))
"{-, (-,-)}";;

expect_fail
(Branch(
  Guide ("x", Branch (End (NameBox "x"), End (NameBox "x"))),
  Guide ("y", Branch (End (NameBox "y"), End (NameBox "y")))
));;

expect_fail
(Branch(
  Guide ("z", End (NameBox "w")),
  Branch(
    Guide ("x", Branch (End(NameBox "x"), End (NameBox "x"))),
    Guide ("y", Branch (End (NameBox "y"), End (NameBox "y")))
  )
));;

expect_fail
(Branch(
  Guide ("x", (Guide ("y", Guide ("z", Guide ("w", Branch (Branch
    (End (NameBox "x"), End (NameBox "y")), Branch (End (NameBox "z"),
    End (NameBox "w")))))))),
  End StarBox
));;

expect_fail
(Branch(
  Guide ("x", (Guide ("y", Guide ("z", Guide ("w", Branch (Branch
    (End (NameBox "x"), End (NameBox "y")), Branch (End (NameBox "z"),
    End (NameBox "w")))))))),
  Guide ("a", End StarBox)
));;

expect_str
(Branch(
  Guide ("x", (Guide ("y", Guide ("z", Guide ("w", Branch (Branch
    (End (NameBox "x"), End (NameBox "y")), Branch (End (NameBox "z"),
    End (NameBox "w")))))))),
  Guide ("a", Branch (End (NameBox "a"),End (NameBox "b")))
))
"{-, (-,-), (-,(-,-)), ((-,(-,-)),(-,-))}";;

expect_str
(Branch(
  Branch(Branch(End (NameBox "a"), End(NameBox "b")), End(NameBox "c")),
  Branch(Branch(End (NameBox "d"), End(NameBox "e")), End(NameBox "f"))
))
"{-, (-,(-,-)), (-,(-,(-,-)))}";;

expect_str
(Branch(
  Branch(
    Branch(Branch(End (NameBox "a"), End(NameBox "b")), End(NameBox "c")),
    Branch(Branch(End (NameBox "d"), End(NameBox "e")), End(NameBox "f"))
  ),
  Guide ("x", Branch(End (NameBox "x"), End StarBox))
))
"{-, (-,-), (-,(-,-)), (-,(-,(-,(((-,-),-),-))))}";;

expect_fail
(Branch(
  Branch(
    Branch(Branch(End (NameBox "a"), End(NameBox "b")), End(NameBox "c")),
    Branch(Branch(End (NameBox "d"), End(NameBox "e")), End(NameBox "f"))
  ),
  Branch(End (NameBox "a"), End StarBox)
));;

expect_str
(Branch(
  Branch(
    Branch(Branch(End (NameBox "a"), End(NameBox "b")), End(NameBox "c")),
    Branch(Branch(End (NameBox "d"), End(NameBox "e")), End(NameBox "f"))
  ),
  Branch(End (NameBox "b"), End StarBox)
))
"{-, (-,-), (-,(-,-)), ((-,-),(-,(-,(-,-))))}";;

expect_str
(Branch(
  Branch(
    Branch(Branch(End (NameBox "a"), End(NameBox "b")), End(NameBox "c")),
    Branch(Branch(End (NameBox "d"), End(NameBox "e")), End(NameBox "f"))
  ),
  Branch(End (NameBox "c"), End StarBox)
))
"{-, (-,-), (-,(-,-)), (-,((-,-),(-,(-,-))))}";;

expect_str
(Branch(
  Branch(
    Branch(Branch(End (NameBox "a"), End(NameBox "b")), End(NameBox "c")),
    Branch(Branch(End (NameBox "d"), End(NameBox "e")), End(NameBox "f"))
  ),
  Branch(End (NameBox "d"), End StarBox)
))
"{-, (-,(-,-)), (-,(-,(-,((-,-),-))))}";;

expect_str
(Branch(
  Branch(
    Branch(Branch(End (NameBox "a"), End(NameBox "b")), End(NameBox "c")),
    Branch(Branch(End (NameBox "d"), End(NameBox "e")), End(NameBox "f"))
  ),
  Branch(End (NameBox "e"), End StarBox)
))
"{-, (-,-), (-,(-,(-,(-,-)))), ((-,-),(-,-))}";;

expect_str
(Branch(
  Branch(
    Branch(Branch(End (NameBox "a"), End(NameBox "b")), End(NameBox "c")),
    Branch(Branch(End (NameBox "d"), End(NameBox "e")), End(NameBox "f"))
  ),
  Branch(End (NameBox "f"), End StarBox)
))
"{-, (-,-), (-,(-,(-,(-,-)))), (-,((-,-),-))}";;

(* 19 boxes, 90 nodes *)
expect_str
(Branch ((Guide ("Bill", (End (NameBox "Bill")))) , (Branch ((Branch
  ((Guide ("Claudette", (Branch ((Branch ((End (NameBox "Claudette")) , (End
  (NameBox "Danny")))) , (Branch ((End (NameBox "Erika")) , (Guide ("Fred", (End
  (NameBox "Fred")))))))))) , (Branch ((Branch ((Branch ((Branch ((End (NameBox
  "Grace")) , (End (NameBox "Henri")))) , (Branch ((End (NameBox "Ida")) , (End
  (NameBox "Joaquin")))))) , (End (NameBox "Kate")))) , (Branch ((End (NameBox
  "Larry")) , (Branch ((End (NameBox "Mindy")) , (Guide ("Nicholas", (End
  (NameBox "Nicholas")))))))))))) , (Branch ((Branch ((End (NameBox "Odette")) ,
  (Guide ("Peter", (Guide ("Rose", (Branch ((End (NameBox "Rose")) , (End
  (NameBox "Sam")))))))))) , (Branch ((Branch ((Guide ("Teresa", (End (NameBox
  "Teresa")))) , (End (NameBox "Victor")))) , (End (NameBox "Wanda"))))))))))
("{-, (-,-), (-,(-,(-,-))), (-,(-,(-,(-,(-,(-,(-,-))))))), ((-,-),-), ((-,((-" ^
  ",-),-)),(-,-))}");;

(* 40 boxes, about 190 nodes *)
expect_str
(Branch ((End (NameBox "ab")) , (Branch ((Branch ((Branch ((Branch ((Guide
  ("ac", (Guide ("ad", (Guide ("ae", (Guide ("af", (Guide ("ag", (End (NameBox
  "ag")))))))))))) , (End (NameBox "ah")))) , (Branch ((Branch ((Branch ((Branch
  ((Branch ((Branch ((End (NameBox "ai")) , (End (NameBox "aj")))) , (Guide
  ("ak", (End (NameBox "ak")))))) , (Branch ((End (NameBox "al")) , (Guide
  ("am", (End (NameBox "am")))))) )) , (Branch ((Branch ((End (NameBox "an")) ,
  (Branch ((End (NameBox "ao")) , (End (NameBox "ap")))) )) , (Guide ("aq", (End
  (NameBox "aq")))))))) , (End (NameBox "ar")))) , (Branch ((End (NameBox "as"))
  , (Branch ((Branch ((End (NameBox "at")) , (End (NameBox "au")))) , (Branch
  ((Guide ("av", (Branch ((End (NameBox "av")) , (End (NameBox "aw")))) )) ,
  (Branch ((Guide ("ax", (End (NameBox "ax")))) , (End (NameBox "ay")))) )))))))
  ))) , (End (NameBox "az")))) , (Branch ((Branch ((Guide ("ba", (Branch
  ((Branch ((Branch ((Branch ((End (NameBox "ba")) , (Branch ((End (NameBox "bb"
  )) , (End (NameBox "bc")))))) , (End (NameBox "bd")))) , (Guide ("be", (Guide
  ("bf", (Branch ((End (NameBox "bf")) , (End (NameBox "bg")))) )))))) , (Branch
  ((Branch ((End (NameBox "bh")) , (Branch ((Branch ((End (NameBox "bi")) , (End
  (NameBox "bj")))) , (End (NameBox "bk")))) )) , (Branch ((Branch ((Branch ((
  End (NameBox "bl")) , (End (NameBox "bm")))) , (Guide ("bn", (End (NameBox
  "bn")))))) , (Branch ((Branch ((End (NameBox "bo")) , (End (NameBox "bp")))) ,
  (Branch ((End (NameBox "bq")) , (End (NameBox "br")))) )) )) )) )) )) , (End
  (NameBox "bs")))) , (End (NameBox "bt")))) )) ))
("{-, (-,-), (-,(-,-)), (-,(-,((-,((-,-),-)),(-,(-,-))))), (-,((-,-),-)), (-," ^
  "((-,-),(-,-))), (-,((-,-),(-,(-,(-,(-,-)))))), ((-,-),-)}");;

(* 74 nodes, ~350 nodes *)
expect_str
(Guide ("ab", (Branch ((End (NameBox "ab")) , (Guide ("ac", (Branch ((Guide
  ("ad", (Branch ((Guide ("ae", (Guide ("af", (Branch ((End (NameBox "af")) ,
  (Branch ((Branch ((Branch ((Guide ("ag", (Branch ((End (NameBox "ag")) , (End
  (NameBox "ah")))))) , (End (NameBox "ai")))) , (Branch ((End (NameBox "aj")) ,
  (Branch ((Branch ((Branch ((End (NameBox "ak")) , (End (NameBox "al")))) ,
  (Branch ((End (NameBox "am")) , (End (NameBox "an")))) )) , (End (NameBox "ao"
  )))) )))) , (Branch ((Guide ("ap", (End (NameBox "ap")))) , (End (NameBox "aq"
  )))) )) )) )))) , (End (NameBox "ar")))) )) , (Guide ("as", (Branch ((Branch
  ((Branch ((Guide ("at", (Branch ((End (NameBox "at")) , (Guide ("au", (End
  (NameBox "au")))))))) , (Guide ("av", (Branch ((Branch ((Branch ((Guide ("aw",
  (Branch ((Branch ((End (NameBox "aw")) , (End (NameBox "ax")))) , (Branch ((
  End (NameBox "ay")) , (End (NameBox "az")))) )) )) , (Guide ("ba", (Guide (
  "bb", (Branch ((End (NameBox "bb")) , (End (NameBox "bc")))) )))))) , (Branch
  ((Branch ((Branch ((Branch ((End (NameBox "bd")) , (End (NameBox "be")))) ,
  (Branch ((End (NameBox "bf")) , (End (NameBox "bg")))) )) , (End (NameBox "bh"
  )))) , (Branch ((Branch ((End (NameBox "bi")) , (Branch ((End (NameBox "bj"))
  , (End (NameBox "bk")))) )) , (Branch ((Branch ((End (NameBox "bl")) , (End
  (NameBox "bm")))) , (Branch ((End (NameBox "bn")) , (End (NameBox "bo")))) ))
  )) )) )) , (End (NameBox "bp")))))))) , (Branch ((Branch ((End (NameBox "bq"))
  , (Branch ((Guide ("br" , (Branch ((End (NameBox "br")) , (Branch ((Branch
  ((Branch ((End (NameBox "bs")) , (End (NameBox "bt")))) , (Branch ((End
  (NameBox "bu")) , (End (NameBox "bv")))) )) , (Branch ((Branch ((End (NameBox
  "bw")) , (End (NameBox "bx")))) , (End (NameBox "by")))))))))) , (Branch ((
  Guide ("bz", (End (NameBox "bz")))) , (Guide ("ca", (Branch ((End (NameBox
  "ca")) , (End (NameBox "cb")))) )))))))) , (Guide ("cc", (Branch ((Branch ((
  End (NameBox "cc")) , (Branch ((Guide ("cd", (Guide ("ce", (End (NameBox "ce")
  ))))) , (Branch ((Guide ("cf", (Branch ((End (NameBox "cf")) , (End (NameBox
  "cg")))))) , (Branch ((End (NameBox "ch")) , (End (NameBox "ci")))))))))) ,
  (Branch ((Branch ((Branch ((Branch((Branch ((End (NameBox "cj")) , (End (
    NameBox "ck")))) , (Branch ((End (NameBox "cl")) , (End (NameBox "cm"))))))
  , (Guide ("cn", (Branch ((End (NameBox "cn")) , (End (NameBox "co")))))))) ,
  (Guide ("cp", (Branch ((Guide ("cq", (End (NameBox "cq")))) , (Branch ((End
  (NameBox "cr")) , (End (NameBox "cs")))))))))) , (Branch ((Branch ((Branch ((
  End (NameBox "ct")) , (Branch ((End (NameBox "cu")) , (End (NameBox "cv"))))))
  , (Branch ((End (NameBox "cw")) , (Guide ("cx", (End (NameBox "cx")))))))),
  (Branch ((Branch ((Branch ((End (NameBox "cy")) , (End (NameBox "cz")))) ,
  (Branch ((End (NameBox "da")) , (End (NameBox "db")))))) , (Guide ("dc", (
  Branch ((End (NameBox "dc")) , (End (NameBox "dd")))))))))))))))))))) , (Guide
  ("de", (End (NameBox "de"))))))))))))))))
("{-, (-,-), (-,(-,-)), (-,(-,(-,-))), (-,(-,(-,(-,-)))), (-,(-,(-,(-,(-,((-," ^
  "-),-)))))), (-,(-,(-,(-,((-,-),-))))), (-,(-,(((-,-),-),-))), (-,(-,(((-,-" ^
  "),-),((-,-),(-,-))))), (-,((-,(-,(-,(-,((-,-),-))))),(-,(-,(-,((-,-),-))))" ^
  ")), (-,((((-,-),(-,-)),-),-)), ((-,-),-), ((-,-),(-,-)), ((-,-),(-,((-,-)," ^
  "-))), ((-,((-,-),-)),-)}");;

(* 514 nodes, 120 boxes *)
expect_str
(Branch ((Guide ("xebec", (End (NameBox "xebec")))) , (Branch ((End
  (NameBox "xenia")) , (Branch ((Branch ((Branch ((Branch ((Branch ((Branch ((
  Guide ("xenon", (Branch ((Branch ((Branch ((End (NameBox "xenon")) , (End (
  NameBox "xenophobia")))) , (Branch ((End (NameBox "xeric")) , (End (NameBox
  "xerophilous")))))) , (End (NameBox "xerophthalmia")))))) , (Branch ((Branch
  ((Guide ("xerophyte", (Branch ((End (NameBox "xerophyte")) , (End (NameBox
  "xylem")))))) , (Guide ("xylophone", (Guide ("y", (End (NameBox "y")))))))) ,
  (Branch ((Guide ("yacht", (Branch ((End (NameBox "yacht")) , (End (NameBox
  "yachting")))))) , (Branch ((Branch ((End (NameBox "yachtsman")) , (End (
  NameBox "yahoo")))) , (Branch ((End (NameBox "yak")) , (End (NameBox "yam"))))
  )))))))) , (Branch ((Branch ((Branch ((End (NameBox "yammer")) , (Branch ((End
  (NameBox "yank")) , (Guide ("yanqui", (End (NameBox "yanqui")))))))) , (Branch
  ((Guide ("yap", (End (NameBox "yap")))) , (Guide ("yard", (Branch ((End (
  NameBox "yard")) , (End (NameBox "yardage")))))))))) , (Branch ((Branch ((
  Branch ((End (NameBox "yardarm")) , (End (NameBox "yardman")))) , (Branch ((
  End (NameBox "yardmaster")) , (Branch ((End (NameBox "yardstick")) , (End (
  NameBox "yarn")))))))) , (Branch ((End (NameBox "yarrow")) , (End (NameBox
  "yaw")))))))))) , (Branch ((Branch ((Branch ((Branch ((End (NameBox "yawl")) ,
  (Branch ((Branch ((End (NameBox "yawn")) , (End (NameBox "yaws")))) , (Branch
  ((End (NameBox "yclept")) , (End (NameBox "ye")))))))) , (Branch ((Branch ((
  Branch ((End (NameBox "yea")) , (End (NameBox "yean")))) , (Branch ((End (
  NameBox "yeanling")) , (End (NameBox "year")))))) , (End (NameBox "yearbook"))
  )))) , (Branch ((Guide ("yearling", (Branch ((End (NameBox "yearling")) , (End
  (NameBox "yearlong")))))) , (Guide ("yearly", (Branch ((Branch ((End (NameBox
  "yearly")) , (End (NameBox "yearn")))) , (Branch ((End (NameBox "yearning")) ,
  (End (NameBox "yeast")))))))))))) , (Guide ("yeasty", (Guide ("yell", (Branch
  ((Guide ("yellow", (End (NameBox "yellow")))) , (Branch ((Branch ((End (
  NameBox "yellowish")) , (End (NameBox "yelp")))) , (Guide ("yen", (End (
  NameBox "yen")))))))))))))))) , (Branch ((Branch ((Branch ((Branch ((End (
  NameBox "yeoman")) , (Branch ((Branch ((End (NameBox "yeomanry")) , (Branch ((
  End (NameBox "yes")) , (End (NameBox "yesterday")))))) , (End (NameBox
  "yesteryear")))))) , (Guide ("yet", (Branch ((Branch ((End (NameBox "yet")) ,
  (Branch ((End (NameBox "yew")), (End (NameBox "yield")))))) , (End (NameBox
  "yielding")))))))) , (Branch ((Branch ((End (NameBox "yodel")) , (End (NameBox
  "yoga")))) , (Branch ((Branch ((Branch ((Branch ((End (NameBox "yogi")) , (End
  (NameBox "yogurt")))) , (Branch ((End (NameBox "yoke")) , (End (NameBox
  "yokel")))) )) , (Branch ((Branch ((End (NameBox "yolk")) , (End (NameBox
  "yon")))) , (Branch ((End (NameBox "yonder")) , (End (NameBox "yore")))))))) ,
  (End (NameBox "you")))))))) , (Branch ((End (NameBox "young")) , (End (NameBox
  "youngish")))))) )) , (Guide ("youngling", (Branch ((End (NameBox "youngling")
  ) , (Branch ((End (NameBox "youngster")) , (End (NameBox "younker")))))))))) ,
  (Branch ((Branch ((Branch ((Branch ((Branch ((End (NameBox "your")) , (Guide (
  "yours", (End (NameBox "yours")))))) , (Branch ((Branch ((Branch ((Branch ((
  Guide ("yourself", (End (NameBox "yourself")))) , (Branch ((End (NameBox
  "youth")) , (End (NameBox "youthful")))))) , (Guide ("yowl", (Branch ((End (
  NameBox "yowl")) , (End (NameBox "ytterbium")))) )))) , (End (NameBox
  "yttrium")))) , (Guide ("yuan", (End (NameBox "yuan")))))))) , (End (NameBox
  "yucca")))) , (Branch ((Branch ((Branch ((Branch ((End (NameBox "yule")) , (
  Branch ((End (NameBox "yuletide")) , (Branch ((Branch ((End (NameBox "yummy"))
  , (End (NameBox "z")))) , (End (NameBox "zany")))))))) , (End (NameBox "zeal")
  ))) , (Guide ("zealot", (Branch ((Branch ((End (NameBox "zealot")) , (Guide (
  "zealous", (Branch ((End (NameBox "zealous")) , (End (NameBox "zebra"))))))))
  , (Branch ((Guide ("zebu", (End (NameBox "zebu")))) , (End (NameBox "zed")))))
  ))))) , (End (NameBox "zeitgeist")))))) , (Branch ((End (NameBox "zenana")) ,
  (Branch ((Branch ((End (NameBox "zenith")) , (End (NameBox "zephyr")))) , (
  Branch ((Guide ("zeppelin", (End (NameBox "zeppelin")))) , (Branch ((Branch ((
  Branch ((Branch ((Branch ((End (NameBox "zero")) , (End (NameBox "zest")))) ,
  (Branch ((End (NameBox "zigzag")) , (End (NameBox "zinc")))))) , (Branch ((
  Branch ((End (NameBox "zing")) , (End (NameBox "zinnia")))) , (Branch ((End
  (NameBox "zip")) , (End (NameBox "zipper")))))))) , (Guide ("zippy", (End (
  NameBox "zippy")))))) , (Guide ("zircon", (Branch ((Branch ((Guide (
  "zirconium", (End (NameBox "zirconium")))) , (End (NameBox "zither")))) , (
  Branch ((Branch ((End (NameBox "zloty")) , (End (NameBox "zodiac")))) , (
  Branch ((End (NameBox "zombie")) , (End (NameBox "zonal"))))))))))))))))))))))
  ))))
("{-, (-,-), (-,(-,-)), (-,(-,(-,-))), (-,(-,(-,(-,-)))), (-,(-,(-,(-,(-,(-,(" ^
  "-,(-,(-,(((-,-),-),(-,-))))))))))), (-,(-,(-,(-,(-,(-,(-,(((-,-),-),(-,-))" ^
  "))))))), (-,(-,(-,(-,(-,(-,(((-,-),-),(-,-)))))))), (-,(-,(-,((-,-),((-,-)" ^
  ",-))))), (-,(-,(-,((-,(-,-)),-)))), (-,(-,(((((-,-),-),(-,-)),-),(-,-))))," ^
  " (-,((-,-),-)), (-,((-,(-,(-,(-,(-,(-,(((-,-),-),(-,-)))))))),(-,(-,(-,(-," ^
  "(-,(-,(((-,-),-),(-,-)))))))))), (-,(((-,-),-),(-,-))), (-,(((-,-),-),(-,(" ^
  "(-,-),-)))), (-,(((-,(-,-)),-),(-,(-,-)))), ((-,-),-), ((-,-),(-,(-,(-,(-," ^
  "-))))), ((-,(-,-)),-), (((-,-),-),(-,-)), (((-,-),-),(-,((-,-),-)))}");;

print_results ()
