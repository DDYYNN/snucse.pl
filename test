#!/usr/bin/env ruby
Dir.chdir File.dirname __FILE__

require 'curses'
require 'parallel'

GREEN = 1
RED = 2
$results = []

Curses::noecho
Curses::init_screen
Curses::start_color
Curses::init_pair(GREEN, 83, Curses::COLOR_BLACK)
Curses::init_pair(RED, 166, Curses::COLOR_BLACK)



#
# Helpers
#
def assert actual; assert_eq actual, true end
def assert_eq actual, expected
  return true if expected == actual

  $results << [ expected, actual ]
  false
end

class Fixnum
  def digits
    return 1 if self == 0
    Math.log10(abs).to_i + 1
  end
end

class Curses::Window
  def print(msg)
    self << msg
    refresh
  end

  def color(col)
    color_set col
    yield
    color_set 0
  end

  def counter(count)
    Counter.new(self, count)
  end

  def ok
    color(GREEN) { print "✓\n" * maxy }
  end

  def result(succeeded, total)
    succeeded = succeeded.to_i
    total = total.to_i

    icon, col = succeeded == total ? ['✓', GREEN] : ['✗', RED]
    color(col) { self << icon }

    print ' (%d/%d, %g%%)' % [succeeded, total, succeeded * 100.0 / total]
  end
end

class Counter
  def initialize win, total
    @win = win
    @format = "%0#{(total - 1).digits}d/#{total}"
    @iter = 0
    @total = total
    @print_length = 0
  end

  def tick
    msg = @format % @iter
    @win.print "\b"*@print_length + msg

    @iter += 1
    @print_length = msg.length
  end

  def clean
    @win.print "\b"*@print_length + ' '*@print_length + "\b"*@print_length

    @iter = @total
    @print_length = 0
  end

  def count; return @iter end
end


#
# Tests
#
class Test
  @@tasks = []
  @@pos = 3

  head = Curses::Window.new(2, 0, 1, 3)
  head.print <<-HEAD
  Homework │ Status
───────────┼─────────
  HEAD

  def self.add(*params)
    height = params.length

    left = Curses::Window.new(height, 6, @@pos, 10)
    left << params.map { |x| x + ' |' } .join("\n")
    left.refresh

    win = Curses::Window.new(height, 0, @@pos, 16)
    @@tasks << Thread.new do
      yield win
    end
    @@pos += height
  end

  def self.wait
    @@tasks.each { |thr| thr.join }

    line = Curses::Window.new(0, 2, 0, 43)
    line << "|\n" * line.maxy
    line.refresh

    win = Curses::Window.new(0, 0, 1, 45)
    win.keypad true
    win.scrollok true

    if $results.empty?
      win.print "    All Green!\n"
    else
      $results.each do |expected, actual|
        win << "Expected : '%s', Actual : '%s'\n" % [expected.chomp, actual.chomp]
      end
    end

    win.print "\n    Press 'q' to exit "

    loop do
      break if win.getch == 'q'
    end
  end
end

def kminus win, dirname, ext = 'k-'
  result = true
  succeeded = 0

  `cd #{dirname} && make 2>/dev/null`
  glob = Dir.glob("#{dirname}/examples/*.out")
  counter = win.counter glob.count
  glob.each do |name|
    code = File.basename(name, '.out')

    input = File.join(dirname, 'examples', File.basename(name, '.out') + '.in')
    actual = unless File.exist?(input)
      `#{dirname}/run #{dirname}/examples/#{code}.#{ext} 2>/dev/null`
    else
      `#{dirname}/run #{dirname}/examples/#{code}.#{ext} < #{input} 2>/dev/null`
    end

    expected = File.read(name)

    res = assert_eq actual, expected
    counter.tick

    succeeded += 1 if res
    result &&= res
  end
  counter.clean

  win.result succeeded, counter.count
end


Test.add '1.*', '2.*' do |win|
  assert system 'ocaml tests/basic.ml'

  win.ok
end

Test.add '2.2' do |win|
  assert system 'ocaml tests/hw2-ex2.ml'

  win.ok
end

Test.add '2.7' do |win|
  assert_eq `ocaml tests/hw2-ex7.ml`, File.read('tests/hw2-ex7')

  win.ok
end

Test.add '3.1' do |win|
  kminus win, 'hw3'
end

Test.add '3.2' do |win|
  @exename = "tests/coin"

  win.print 'Compiling...'
  system "g++ -std=c++0x -O3 tests/hw3-ex2.cc -o #{@exename}"
  win.clear

  try = 120
  @counter = win.counter try
  def test num
    @counter.tick
    assert_eq `echo #{num} | hw3/run hw3/examples/ex2.k-`, `#{@exename} #{num}`
  end

  win.print 'Testing '
  test 10000
  Parallel.map(2..try, in_threads: 3) { test rand(1..10000) }
  win.clear

  File.delete @exename

  win.ok
end

Test.add '3.3' do |win|
  def test name
    code = File.read('hw3/examples/ex3.k-')
    test = File.read("tests/#{name}.k-")

    tmp = 'tests/tmp'
    File.write(tmp, code + ';' + test)
    actual = `hw3/run #{tmp}`
    File.delete tmp

    expected = File.read("tests/#{name}.out")

    assert_eq actual, expected
  end

  test 'hw3-ex3'
  test 'hw3-ex3-TA'

  win.ok
end

Test.add '4.2' do |win|
  succeeded, total = `cd hw4 && ./test --simple`.chomp.split('/')
  assert $?.success?

  win.result succeeded, total
end

Test.add '5.1' do |win|
  kminus win, 'hw5', 'k--'
end

Test.wait
